@using System.Net
@using System.Text

<MudDialog>
    <DialogContent>
        <MudContainer>
            @if (_loading)
            {
                <MudProgressCircular Indeterminate="true"></MudProgressCircular>
            }
            else
            {
                <MudGrid>
                    <MudItem xs="12" sm="4">
                        <MudCarousel ItemsSource="@_recipe.Images" Style="height:200px; width:200px">
                            <ItemTemplate>
                                <MudImage Src="@($"data:image/png;base64,{context.Data}")" ObjectFit="ObjectFit.Fill" Fluid="true" />
                            </ItemTemplate>
                        </MudCarousel>
                    </MudItem>
                    <MudItem xs="12" sm="8">
                        <MudText Typo="Typo.h5">@_recipe?.Name</MudText>
                        <MudText Typo="Typo.body2">@_recipe?.Description</MudText>
                        <MudText Typo="Typo.h6">Rs. @_recipe?.FixedPrice</MudText>
                        <MudRating ReadOnly="true" SelectedValue="(_recipe == null)? 0: Recipe.Stars" />
                        <MudGrid>
                            <MudItem xs="8" sm="4">
                                <MudTextField @bind-Value="@_foodItem!.Quantity" Label="Filled" Variant="Variant.Filled" />
                                <MudText Typo="Typo.h6">Rs. @(_foodItem.Price * _foodItem!.Quantity)</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="12" sm="12">
                            <MudGrid>
                                @foreach (FoodItemIngredientDetail item in _foodItemIngredients)
                            {
                                @if (item.CanModify)
                                {
                                    @*Recipe/ Ingredient name and user can edit the amount by using a slider*@
                                    <MudItem xs="12" sm="12">
                                        <MudGrid>
                                            <MudItem xs="12" sm="6">
                                                <MudText Typo="Typo.h6">@item.Ingredient_Name@item.Recipe_Name</MudText>
                                                <MudText>@item.Amount @item.Measurement</MudText>
                                            </MudItem>
                                            <MudItem xs="12" sm="6" Class="d-flex">
                                                <MudText Typo="Typo.h6">X</MudText>
                                                <MudSlider Value="@item.Multiplier"
                                                            TickMarks="true" TickMarkLabels="@(GenerateTickMarkLabels((item.IsRequired)? 0.5: 0, (item.RecommendedMultiplier*2), 0.5))"
                                                            ValueChanged="(double v) => OnSliderValueChanged(item, v)"
                                                            Min="@((item.IsRequired)? 0.5: 0)" Max="@(item.RecommendedMultiplier*2)"
                                                            Variant="Variant.Filled"
                                                            Step="0.5" />
                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                }
                            }
                        </MudGrid>
                    </MudItem>
                </MudGrid>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        @if (!_loading)
        {
            <MudButton Color="Color.Primary" Variant="@Variant.Filled" StartIcon="@Icons.Material.Filled.AddShoppingCart" OnClick="AddToCart">Add To Cart</MudButton>
            <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Cancel" OnClick="Cancel">Cancel</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    private string[] GenerateTickMarkLabels(double min, double max, double step)
    {
        int numberOfLabels = (int)((max - min) / step) + 1;
        string[] labels = new string[numberOfLabels];
        for (int i = 0; i < numberOfLabels; i++)
        {
            labels[i] = (min + i * step).ToString();
        }
        return labels;
    }


    private void OnSliderValueChanged(FoodItemIngredientDetail item, double value)
    {
        item.Multiplier = value;
        _foodItem!.Price = _recipe.FixedPrice;
        foreach (FoodItemIngredient e in _foodItemIngredients)
        {
            if (!e.CanModify) continue;
            decimal multiplierPrice = Convert.ToDecimal(Convert.ToDouble(e.PricePerMultiplier) * e.Multiplier);
            if (!e.IsRequired)
            {
                _foodItem.Price += multiplierPrice;
                continue;
            }
            _foodItem.Price += (e.Multiplier != 1) ? multiplierPrice - e.PricePerMultiplier : 0;
        }
    }
}